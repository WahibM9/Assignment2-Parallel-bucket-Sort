#include <stdio.h>
#include <stdlib.h>
#include <omp.h>
#include <time.h>

#define MAX_VALUE 100
#define N 1000 
#define NUM_BUCKETS 10 


int compare_ints(const void *a, const void *b) {
    int arg1 = *(const int *)a;
    int arg2 = *(const int *)b;
    return (arg1 > arg2) - (arg1 < arg2);
}


void bucketSort(int *arr, int n) {
    int i, j, k;
    int count[NUM_BUCKETS] = {0};
    int **buckets = malloc(NUM_BUCKETS * sizeof(int *));
    int bucketSize = MAX_VALUE / NUM_BUCKETS;

    
    for (i = 0; i < NUM_BUCKETS; ++i) {
        buckets[i] = (int *)malloc(n * sizeof(int)); 
    }

    
    #pragma omp parallel for private(i, j)
    for (i = 0; i < n; ++i) {
        j = arr[i] / bucketSize;
        if (j >= NUM_BUCKETS) j = NUM_BUCKETS - 1; 
        #pragma omp critical
        {
            buckets[j][count[j]++] = arr[i];
        }
    }

    
    for (i = 0; i < NUM_BUCKETS; ++i) {
        qsort(buckets[i], count[i], sizeof(int), compare_ints);
    }

    
    for (i = 0, k = 0; i < NUM_BUCKETS; ++i) {
        for (j = 0; j < count[i]; ++j, ++k) {
            arr[k] = buckets[i][j];
        }
        free(buckets[i]);
    }

    free(buckets);
}

int main() {
    int *arr = (int *)malloc(N * sizeof(int));

    
    for (int i = 0; i < N; ++i) {
        arr[i] = rand() % MAX_VALUE;
    }
    
    clock_t start = clock();
    bucketSort(arr, N);

    clock_t end = clock();
    
    double total;

    free(arr);
    
    total = ((double)(end - start)) / CLOCKS_PER_SEC * 1000;
    printf("Total execution time: %.2f milliseconds\n", total);
    return 0;
}
